// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/kobefederation/v1alpha1.KobeFederation":       schema_pkg_apis_kobefederation_v1alpha1_KobeFederation(ref),
		"./pkg/apis/kobefederation/v1alpha1.KobeFederationSpec":   schema_pkg_apis_kobefederation_v1alpha1_KobeFederationSpec(ref),
		"./pkg/apis/kobefederation/v1alpha1.KobeFederationStatus": schema_pkg_apis_kobefederation_v1alpha1_KobeFederationStatus(ref),
	}
}

func schema_pkg_apis_kobefederation_v1alpha1_KobeFederation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KobeFederation is the Schema for the kobefederations API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/kobefederation/v1alpha1.KobeFederationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/kobefederation/v1alpha1.KobeFederationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/kobefederation/v1alpha1.KobeFederationSpec", "./pkg/apis/kobefederation/v1alpha1.KobeFederationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_kobefederation_v1alpha1_KobeFederationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KobeFederationSpec defines the desired state of KobeFederation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "choose which nodes the fed likes to run in",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"confFromFileImage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"inputDumpDir": {
						SchemaProps: spec.SchemaProps{
							Description: "image that makes init file from dump or endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outputDumpDir": {
						SchemaProps: spec.SchemaProps{
							Description: "where the above image expects the dump to be(if from dump)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"confImage": {
						SchemaProps: spec.SchemaProps{
							Description: "where the above image will place its result config file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"inputDir": {
						SchemaProps: spec.SchemaProps{
							Description: "image that makes one init file from multiple init files",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outputDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sparqlEnding": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fedConfDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"forceNewInit": {
						SchemaProps: spec.SchemaProps{
							Description: "which directory the federator needs the metadata config files in order to find them",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"init": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"federatorName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"endpoints": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"datasetNames": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"image", "imagePullPolicy", "affinity", "port", "confFromFileImage", "inputDumpDir", "outputDumpDir", "confImage", "inputDir", "outputDir", "sparqlEnding", "fedConfDir", "forceNewInit", "init", "federatorName", "endpoints", "datasetNames"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Affinity"},
	}
}

func schema_pkg_apis_kobefederation_v1alpha1_KobeFederationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KobeFederationStatus defines the observed state of KobeFederation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podnames": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"podnames"},
			},
		},
	}
}
